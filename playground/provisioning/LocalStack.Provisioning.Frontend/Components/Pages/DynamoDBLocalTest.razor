@page "/dynamodb-local-test"
@using Amazon.DynamoDBv2
@using Amazon.DynamoDBv2.Model

@inject IAmazonDynamoDB DdbClient
@inject ILogger<DynamoDBLocalTest> Logger

<h3>DynamoDB Integration Test</h3>

<p>The IAmazonDynamoDB service client is configured to make requests to: <strong>@ServiceUrl</strong></p>

@if (IsLoading)
{
    <p><em>Loading tables and data...</em></p>
}
else if (HasError)
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @ErrorMessage
    </div>
}
else
{
    <h4>Available Tables (@TableNames.Count)</h4>

    @if (TableNames.Count == 0)
    {
        <p><em>No tables found in the DynamoDB instance.</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var tableName in TableNames)
            {
                <div class="col-12 mb-4">
                    <DynamoDBTableViewer
                        TableName="@tableName"
                        Title="@($"Table: {tableName}")"
                        EnablePolling="true"
                        PollingIntervalMs="5000"
                        MaxItems="25" />
                </div>
            }
        </div>
    }
}

@code {
    private string? ServiceUrl { get; set; }
    private List<string> TableNames { get; set; } = [];
    private bool IsLoading { get; set; } = true;
    private bool HasError { get; set; }
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var listTablesRequest = new ListTablesRequest();
            ServiceUrl = DdbClient.DetermineServiceOperationEndpoint(listTablesRequest).URL;

            // Get all tables
            var tablesResponse = await DdbClient.ListTablesAsync(listTablesRequest);
            TableNames = tablesResponse.TableNames;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load DynamoDB tables");
            HasError = true;
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
